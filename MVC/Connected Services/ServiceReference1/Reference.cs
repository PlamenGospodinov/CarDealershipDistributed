//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MVC.ServiceReference1 {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CompositeType", Namespace="http://schemas.datacontract.org/2004/07/WCFProba")]
    [System.SerializableAttribute()]
    public partial class CompositeType : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool BoolValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StringValueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool BoolValue {
            get {
                return this.BoolValueField;
            }
            set {
                if ((this.BoolValueField.Equals(value) != true)) {
                    this.BoolValueField = value;
                    this.RaisePropertyChanged("BoolValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StringValue {
            get {
                return this.StringValueField;
            }
            set {
                if ((object.ReferenceEquals(this.StringValueField, value) != true)) {
                    this.StringValueField = value;
                    this.RaisePropertyChanged("StringValue");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IService1")]
    public interface IService1 {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetData", ReplyAction="http://tempuri.org/IService1/GetDataResponse")]
        string GetData(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetData", ReplyAction="http://tempuri.org/IService1/GetDataResponse")]
        System.Threading.Tasks.Task<string> GetDataAsync(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetDataUsingDataContract", ReplyAction="http://tempuri.org/IService1/GetDataUsingDataContractResponse")]
        MVC.ServiceReference1.CompositeType GetDataUsingDataContract(MVC.ServiceReference1.CompositeType composite);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetDataUsingDataContract", ReplyAction="http://tempuri.org/IService1/GetDataUsingDataContractResponse")]
        System.Threading.Tasks.Task<MVC.ServiceReference1.CompositeType> GetDataUsingDataContractAsync(MVC.ServiceReference1.CompositeType composite);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetBrands", ReplyAction="http://tempuri.org/IService1/GetBrandsResponse")]
        ApplicationService.DTOs.BrandDTO[] GetBrands();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetBrands", ReplyAction="http://tempuri.org/IService1/GetBrandsResponse")]
        System.Threading.Tasks.Task<ApplicationService.DTOs.BrandDTO[]> GetBrandsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/PostBrand", ReplyAction="http://tempuri.org/IService1/PostBrandResponse")]
        string PostBrand(ApplicationService.DTOs.BrandDTO brandDto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/PostBrand", ReplyAction="http://tempuri.org/IService1/PostBrandResponse")]
        System.Threading.Tasks.Task<string> PostBrandAsync(ApplicationService.DTOs.BrandDTO brandDto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/PutBrand", ReplyAction="http://tempuri.org/IService1/PutBrandResponse")]
        string PutBrand(ApplicationService.DTOs.BrandDTO brandDto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/PutBrand", ReplyAction="http://tempuri.org/IService1/PutBrandResponse")]
        System.Threading.Tasks.Task<string> PutBrandAsync(ApplicationService.DTOs.BrandDTO brandDto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetBrandByID", ReplyAction="http://tempuri.org/IService1/GetBrandByIDResponse")]
        ApplicationService.DTOs.BrandDTO GetBrandByID(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetBrandByID", ReplyAction="http://tempuri.org/IService1/GetBrandByIDResponse")]
        System.Threading.Tasks.Task<ApplicationService.DTOs.BrandDTO> GetBrandByIDAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteBrand", ReplyAction="http://tempuri.org/IService1/DeleteBrandResponse")]
        string DeleteBrand(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteBrand", ReplyAction="http://tempuri.org/IService1/DeleteBrandResponse")]
        System.Threading.Tasks.Task<string> DeleteBrandAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetCars", ReplyAction="http://tempuri.org/IService1/GetCarsResponse")]
        ApplicationService.DTOs.CarDTO[] GetCars();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetCars", ReplyAction="http://tempuri.org/IService1/GetCarsResponse")]
        System.Threading.Tasks.Task<ApplicationService.DTOs.CarDTO[]> GetCarsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetCarByID", ReplyAction="http://tempuri.org/IService1/GetCarByIDResponse")]
        ApplicationService.DTOs.CarDTO GetCarByID(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetCarByID", ReplyAction="http://tempuri.org/IService1/GetCarByIDResponse")]
        System.Threading.Tasks.Task<ApplicationService.DTOs.CarDTO> GetCarByIDAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/PostCar", ReplyAction="http://tempuri.org/IService1/PostCarResponse")]
        string PostCar(ApplicationService.DTOs.CarDTO carDto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/PostCar", ReplyAction="http://tempuri.org/IService1/PostCarResponse")]
        System.Threading.Tasks.Task<string> PostCarAsync(ApplicationService.DTOs.CarDTO carDto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/PutCar", ReplyAction="http://tempuri.org/IService1/PutCarResponse")]
        string PutCar(ApplicationService.DTOs.CarDTO carDto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/PutCar", ReplyAction="http://tempuri.org/IService1/PutCarResponse")]
        System.Threading.Tasks.Task<string> PutCarAsync(ApplicationService.DTOs.CarDTO carDto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteCar", ReplyAction="http://tempuri.org/IService1/DeleteCarResponse")]
        string DeleteCar(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteCar", ReplyAction="http://tempuri.org/IService1/DeleteCarResponse")]
        System.Threading.Tasks.Task<string> DeleteCarAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetSales", ReplyAction="http://tempuri.org/IService1/GetSalesResponse")]
        ApplicationService.DTOs.SaleDTO[] GetSales();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetSales", ReplyAction="http://tempuri.org/IService1/GetSalesResponse")]
        System.Threading.Tasks.Task<ApplicationService.DTOs.SaleDTO[]> GetSalesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetSaleByID", ReplyAction="http://tempuri.org/IService1/GetSaleByIDResponse")]
        ApplicationService.DTOs.SaleDTO GetSaleByID(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetSaleByID", ReplyAction="http://tempuri.org/IService1/GetSaleByIDResponse")]
        System.Threading.Tasks.Task<ApplicationService.DTOs.SaleDTO> GetSaleByIDAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/PostSale", ReplyAction="http://tempuri.org/IService1/PostSaleResponse")]
        string PostSale(ApplicationService.DTOs.SaleDTO saleDto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/PostSale", ReplyAction="http://tempuri.org/IService1/PostSaleResponse")]
        System.Threading.Tasks.Task<string> PostSaleAsync(ApplicationService.DTOs.SaleDTO saleDto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/PutSale", ReplyAction="http://tempuri.org/IService1/PutSaleResponse")]
        string PutSale(ApplicationService.DTOs.SaleDTO saleDto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/PutSale", ReplyAction="http://tempuri.org/IService1/PutSaleResponse")]
        System.Threading.Tasks.Task<string> PutSaleAsync(ApplicationService.DTOs.SaleDTO saleDto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteSale", ReplyAction="http://tempuri.org/IService1/DeleteSaleResponse")]
        string DeleteSale(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteSale", ReplyAction="http://tempuri.org/IService1/DeleteSaleResponse")]
        System.Threading.Tasks.Task<string> DeleteSaleAsync(int id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService1Channel : MVC.ServiceReference1.IService1, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service1Client : System.ServiceModel.ClientBase<MVC.ServiceReference1.IService1>, MVC.ServiceReference1.IService1 {
        
        public Service1Client() {
        }
        
        public Service1Client(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public Service1Client(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string GetData(int value) {
            return base.Channel.GetData(value);
        }
        
        public System.Threading.Tasks.Task<string> GetDataAsync(int value) {
            return base.Channel.GetDataAsync(value);
        }
        
        public MVC.ServiceReference1.CompositeType GetDataUsingDataContract(MVC.ServiceReference1.CompositeType composite) {
            return base.Channel.GetDataUsingDataContract(composite);
        }
        
        public System.Threading.Tasks.Task<MVC.ServiceReference1.CompositeType> GetDataUsingDataContractAsync(MVC.ServiceReference1.CompositeType composite) {
            return base.Channel.GetDataUsingDataContractAsync(composite);
        }
        
        public ApplicationService.DTOs.BrandDTO[] GetBrands() {
            return base.Channel.GetBrands();
        }
        
        public System.Threading.Tasks.Task<ApplicationService.DTOs.BrandDTO[]> GetBrandsAsync() {
            return base.Channel.GetBrandsAsync();
        }
        
        public string PostBrand(ApplicationService.DTOs.BrandDTO brandDto) {
            return base.Channel.PostBrand(brandDto);
        }
        
        public System.Threading.Tasks.Task<string> PostBrandAsync(ApplicationService.DTOs.BrandDTO brandDto) {
            return base.Channel.PostBrandAsync(brandDto);
        }
        
        public string PutBrand(ApplicationService.DTOs.BrandDTO brandDto) {
            return base.Channel.PutBrand(brandDto);
        }
        
        public System.Threading.Tasks.Task<string> PutBrandAsync(ApplicationService.DTOs.BrandDTO brandDto) {
            return base.Channel.PutBrandAsync(brandDto);
        }
        
        public ApplicationService.DTOs.BrandDTO GetBrandByID(int id) {
            return base.Channel.GetBrandByID(id);
        }
        
        public System.Threading.Tasks.Task<ApplicationService.DTOs.BrandDTO> GetBrandByIDAsync(int id) {
            return base.Channel.GetBrandByIDAsync(id);
        }
        
        public string DeleteBrand(int id) {
            return base.Channel.DeleteBrand(id);
        }
        
        public System.Threading.Tasks.Task<string> DeleteBrandAsync(int id) {
            return base.Channel.DeleteBrandAsync(id);
        }
        
        public ApplicationService.DTOs.CarDTO[] GetCars() {
            return base.Channel.GetCars();
        }
        
        public System.Threading.Tasks.Task<ApplicationService.DTOs.CarDTO[]> GetCarsAsync() {
            return base.Channel.GetCarsAsync();
        }
        
        public ApplicationService.DTOs.CarDTO GetCarByID(int id) {
            return base.Channel.GetCarByID(id);
        }
        
        public System.Threading.Tasks.Task<ApplicationService.DTOs.CarDTO> GetCarByIDAsync(int id) {
            return base.Channel.GetCarByIDAsync(id);
        }
        
        public string PostCar(ApplicationService.DTOs.CarDTO carDto) {
            return base.Channel.PostCar(carDto);
        }
        
        public System.Threading.Tasks.Task<string> PostCarAsync(ApplicationService.DTOs.CarDTO carDto) {
            return base.Channel.PostCarAsync(carDto);
        }
        
        public string PutCar(ApplicationService.DTOs.CarDTO carDto) {
            return base.Channel.PutCar(carDto);
        }
        
        public System.Threading.Tasks.Task<string> PutCarAsync(ApplicationService.DTOs.CarDTO carDto) {
            return base.Channel.PutCarAsync(carDto);
        }
        
        public string DeleteCar(int id) {
            return base.Channel.DeleteCar(id);
        }
        
        public System.Threading.Tasks.Task<string> DeleteCarAsync(int id) {
            return base.Channel.DeleteCarAsync(id);
        }
        
        public ApplicationService.DTOs.SaleDTO[] GetSales() {
            return base.Channel.GetSales();
        }
        
        public System.Threading.Tasks.Task<ApplicationService.DTOs.SaleDTO[]> GetSalesAsync() {
            return base.Channel.GetSalesAsync();
        }
        
        public ApplicationService.DTOs.SaleDTO GetSaleByID(int id) {
            return base.Channel.GetSaleByID(id);
        }
        
        public System.Threading.Tasks.Task<ApplicationService.DTOs.SaleDTO> GetSaleByIDAsync(int id) {
            return base.Channel.GetSaleByIDAsync(id);
        }
        
        public string PostSale(ApplicationService.DTOs.SaleDTO saleDto) {
            return base.Channel.PostSale(saleDto);
        }
        
        public System.Threading.Tasks.Task<string> PostSaleAsync(ApplicationService.DTOs.SaleDTO saleDto) {
            return base.Channel.PostSaleAsync(saleDto);
        }
        
        public string PutSale(ApplicationService.DTOs.SaleDTO saleDto) {
            return base.Channel.PutSale(saleDto);
        }
        
        public System.Threading.Tasks.Task<string> PutSaleAsync(ApplicationService.DTOs.SaleDTO saleDto) {
            return base.Channel.PutSaleAsync(saleDto);
        }
        
        public string DeleteSale(int id) {
            return base.Channel.DeleteSale(id);
        }
        
        public System.Threading.Tasks.Task<string> DeleteSaleAsync(int id) {
            return base.Channel.DeleteSaleAsync(id);
        }
    }
}
